{"ast":null,"code":"import _classCallCheck from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/cassietripp/Desktop/clickygame/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport CharCard from \"./components/Character/\";\nimport characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      characters: characters,\n      score: 0,\n      topScore: 0,\n      message: \"Click all the images just ONCE!\"\n    };\n    console.log(_this.state);\n    _this.cardClick = _this.cardClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"cardClick\",\n    value: function cardClick(id) {\n      // create a copy of the cards and use a random method to sort the array\n      var count = 111 - this.state.score;\n      var clickedCard = this.state.characters.filter(function (card) {\n        return card.id === id;\n      })[0];\n      var charCopy = this.state.characters.slice().sort(function (a, b) {\n        return 0.5 - Math.random();\n      }); // if a card has not been clicked, set its clicked state to true\n\n      if (!clickedCard.clicked) {\n        clickedCard.clicked = true;\n        charCopy[charCopy.findIndex(function (characters) {\n          return characters.id === id;\n        })] = clickedCard; // set the state and increment the counter\n\n        this.setState({\n          characters: charCopy,\n          score: this.state.score + 1,\n          topScore: this.state.score + 1 > this.state.topScore ? this.state.score + 1 : this.state.topScore,\n          message: \"You still need to click \" + count + \" more!\"\n        });\n      } // if a card has been clicked already, then set its click to false and reset the game\n      else {\n          var resetCharCopy = charCopy.map(function (characters) {\n            return {\n              id: characters.id,\n              image: characters.image,\n              clicked: false\n            };\n          });\n          this.setState({\n            characters: resetCharCopy,\n            score: 0,\n            message: \"You clicked an image twice\"\n          });\n        }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.state.characters.map(function (characters) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(CharCard, {\n          key: characters.id,\n          id: characters.id,\n          image: characters.image,\n          cardClick: _this2.cardClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/cassietripp/Desktop/clickygame/src/App.js"],"names":["React","Component","Header","CharCard","characters","Wrapper","App","props","state","score","topScore","message","console","log","cardClick","bind","id","count","clickedCard","filter","card","charCopy","slice","sort","a","b","Math","random","clicked","findIndex","setState","resetCharCopy","map","image"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport CharCard from \"./components/Character/\";\nimport characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n   characters: characters,\n   score:0,\n   topScore: 0,\n   message: \"Click all the images just ONCE!\"\n  };\n  console.log(this.state)\n  this.cardClick = this.cardClick.bind(this);\n  }\n\n  cardClick(id){\n // create a copy of the cards and use a random method to sort the array\n let count = (111 - this.state.score);\n let clickedCard = this.state.characters.filter(card => card.id === id)[0];\n let charCopy = this.state.characters.slice().sort(function(a, b){return 0.5 - Math.random()});\n // if a card has not been clicked, set its clicked state to true\n if (!clickedCard.clicked) {\n   clickedCard.clicked = true;\n   charCopy[charCopy.findIndex((characters) => characters.id === id)] = clickedCard;\n   \n   // set the state and increment the counter\n   this.setState({\n     characters: charCopy,\n     score: this.state.score + 1,\n     topScore: (this.state.score + 1 > this.state.topScore ? this.state.score + 1 : this.state.topScore),\n     message: \"You still need to click \" + count + \" more!\"\n   });\n }\n \n // if a card has been clicked already, then set its click to false and reset the game\n else {\n   \n   let resetCharCopy = charCopy.map((characters) => {\n     return {\n       id: characters.id,\n       image: characters.image,\n       clicked: false,\n     }\n   });\n   this.setState({\n     characters: resetCharCopy,\n     score: 0,\n     message: \"You clicked an image twice\"\n   });\n } \n}\n\n\n\n  render(){\n    return (\n    <div>\n      <Header score ={this.state.score} topScore ={this.state.topScore} message={this.state.message}/>\n        <Wrapper>\n        {\n          this.state.characters.map(characters => (\n            <div>\n              <CharCard\n              key={characters.id}\n              id={characters.id}\n              image={characters.image}\n              cardClick ={this.cardClick}\n              />\n              </div>\n          ))\n        }\n      </Wrapper>\n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}