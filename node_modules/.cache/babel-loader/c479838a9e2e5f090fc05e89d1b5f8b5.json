{"ast":null,"code":"import _classCallCheck from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/cassietripp/Desktop/clickygame/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/cassietripp/Desktop/clickygame/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport CharCard from \"./components/Character/\";\nimport characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.cardClick = function (id) {\n      // create a copy of the cards and use a random method to sort the array\n      var clickedCard = _this.state.cards.filter(function (card) {\n        return card.id === id;\n      })[0];\n\n      var cardsCopy = _this.state.cards.slice().sort(function (a, b) {\n        return 0.5 - Math.random();\n      }); // if a card has not been clicked, set its clicked state to true\n\n\n      if (!clickedCard.clicked) {\n        clickedCard.clicked = true;\n        cardsCopy[cardsCopy.findIndex(function (card) {\n          return card.id === id;\n        })] = clickedCard; // set the state and increment the counter\n\n        _this.setState({\n          cards: cardsCopy,\n          score: _this.state.score + 1,\n          topScore: _this.state.score + 1 > _this.state.topScore ? _this.state.score + 1 : _this.state.topScore\n        });\n      } // if a card has been clicked already, then set its click to false and reset the game\n      else {\n          var resetCardsCopy = cardsCopy.map(function (card) {\n            return {\n              id: card.id,\n              image: card.image,\n              clicked: false\n            };\n          });\n\n          _this.setState({\n            cards: resetCardsCopy,\n            score: 0\n          });\n        }\n    };\n\n    _this.state = {\n      characters: characters,\n      score: 0,\n      topScore: 0,\n      message: \"Click all the images just ONCE!\"\n    };\n    _this.cardClick = _this.cardClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, this.state.characters.map(function (item) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(CharCard, {\n          key: item.id,\n          id: item.id,\n          image: item.image,\n          cardClick: _this2.cardClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/cassietripp/Desktop/clickygame/src/App.js"],"names":["React","Component","Header","CharCard","characters","Wrapper","App","props","cardClick","id","clickedCard","state","cards","filter","card","cardsCopy","slice","sort","a","b","Math","random","clicked","findIndex","setState","score","topScore","resetCardsCopy","map","image","message","bind","item"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport CharCard from \"./components/Character/\";\nimport characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n   characters: characters,\n   score:0,\n   topScore: 0,\n   message: \"Click all the images just ONCE!\"\n  };\n  this.cardClick = this.cardClick.bind(this);\n  }\n\n  cardClick = id => {\n // create a copy of the cards and use a random method to sort the array\n let clickedCard = this.state.cards.filter(card => card.id === id)[0];\n let cardsCopy = this.state.cards.slice().sort(function(a, b){return 0.5 - Math.random()});\n // if a card has not been clicked, set its clicked state to true\n if (!clickedCard.clicked) {\n   clickedCard.clicked = true;\n   cardsCopy[cardsCopy.findIndex((card) => card.id === id)] = clickedCard;\n   \n   // set the state and increment the counter\n   this.setState({\n     cards: cardsCopy,\n     score: this.state.score + 1,\n     topScore: (this.state.score + 1 > this.state.topScore ? this.state.score + 1 : this.state.topScore),\n   });\n }\n \n // if a card has been clicked already, then set its click to false and reset the game\n else {\n   \n   let resetCardsCopy = cardsCopy.map((card) => {\n     return {\n       id: card.id,\n       image: card.image,\n       clicked: false,\n     }\n   });\n   this.setState({\n     cards: resetCardsCopy,\n     score: 0,\n   });\n } \n}\n\n\n\n  render(){\n    return (\n    <div>\n      <Header score ={this.state.score} topScore ={this.state.topScore} message={this.state.message}/>\n        <Wrapper>\n        {\n          this.state.characters.map(item => (\n            <div>\n              <CharCard\n              key={item.id}\n              id={item.id}\n              image={item.image}\n              cardClick ={this.cardClick}\n              />\n              </div>\n          ))\n        }\n      </Wrapper>\n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}